<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            10. Input and Output Streams
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    10. Input and Output Streams
                </h1>
                <details>
                    <summary class="sum1">
                    10.1 Input and output
                    </summary>
                    <figure>
                        <img src="graphics/Chap10Diag1.png" width="50%">
                    </figure>
                    <p>
                      We need to get data into our program to do
                      interesting computations and we need to get
                      the results out again.
                      <br><br>
                      In C++ Programming, I/O occurs in streams,
                      which are sequences of bytes handled by the
                      input/output library.
                      <br><br>
                      An <i>input operation</i> is when bytes flow from a
                      device like a keyboard, a disk drive, or a
                      network connection etc. to main memory while an
                      <i>output operation</i> is when bytes flow
                      from main memory to a device like a display screen,
                      a printer, a disk drive, or a network connection, etc.
                      <br><br>
                      In this chapter, we’ll learn how to handle I/O
                      consisting of streams using the C++ standard library.
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.2 The I/O stream model
                    </summary>
                    <p>
                      <code>istream</code>:
                      <br>
                      <ul>
                        <li>
                          The type <code>istream </code> deals with streams of
                          input.
                        </li>
                        <li>
                          It turns character sequences into values
                          of various types.
                        </li>
                        <li>
                          It gets those characters from somewhere
                          (such as a console, a file, the main memory,
                          or another computer).
                        </li>
                        <li>
                          <code>istream</code> is quite
                          visible when used from keyboard;
                          what you type is left in the buffer until you
                          hit Enter (return/newline),
                          and you can use the erase (Backspace)
                          key “to change your mind” (until you hit Enter).
                        </li>
                      </ul>
                    </p>
                    <p>
                      <span class='hilight'>Graphical representation of
                        <code>istream</code>:</span>
                        <figure>
                            <img src="graphics/Chap10Diag2.png" width="50%">
                        </figure>
                    </p>
                    <br><br>
                    <p>
                      <code>ostream</code>:
                      <br>
                      <ul>
                        <li>
                          The type <code>ostream</code> to deal with streams
                          of output.
                        </li>
                        <li>
                          It turns values of various types into character
                          sequences.
                        </li>
                        <li>
                          Sends those characters “somewhere”
                          (such as to a console, a file, the main memory,
                          or another computer).
                        </li>
                      </ul>
                    </p>
                    <p>
                      <span class='hilight'>Graphical representation of
                        <code>ostream</code>:</span>
                        <figure>
                            <img src="graphics/Chap10Diag3.png" width="50%">
                        </figure>
                    </p>
                    <br><br>
                    <p>
                      <i>
                        In I/O Streams, buffering is important for dealing
                        with large amounts of data.
                      </i>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.3 Files
                    </summary>
                    <figure>
                        <img src="graphics/Chap10Diag4.png" width="50%">
                    </figure>
                    <p>
                      At the most basic level,
                      a <i>file</i> is simply a sequence of bytes numbered from
                      0 upward. A <i>file</i> has a format; i.e,
                      it has a set of rules that determine what the bytes mean
                      (Eg. character vs binary representation).
                    </p>
                    <br>
                    <p>
                      While <span class="hilight">reading a file</span>
                        , we should:
                      <ul>
                        <li>
                          Know its name
                        </li>
                        <li>
                          Open it (for reading)
                        </li>
                        <li>
                          Read in the characters
                        </li>
                        <li>
                          Close it
                        </li>
                      </ul>
                    </p>
                    <br>
                    <p>
                      While <span class="hilight">writing a file</span>
                      , we should:
                      <ul>
                        <li>
                          Name it
                        </li>
                        <li>
                          Open it (for writing) or create a new file of
                          that name
                        </li>
                        <li>
                          Write out our objects
                        </li>
                        <li>
                          Close it (though that is typically done implicitly)
                        </li>
                      </ul>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.4 Opening a file
                    </summary>
                    <figure>
                        <img src="graphics/Chap10Diag5.png" width="15%">
                    </figure>
                    <p>
                      <ul>
                        <li>
                          An <code>ifstream</code> is an <code>istream</code>
                          for reading from a file.
                        </li>
                        <li>
                          An <code>ofstream</code> is an <code>ostream</code>
                          for writing to a file.
                        </li>
                        <li>
                          A <code>fstream</code> is an <code>iostream</code>
                          that can be used for both reading and writing.
                        </li>
                      </ul>
                    </p>
                    <br>
                    <p>
                       Before a file stream can be used it must be
                       attached to a file:
                       <br>
                       <span class="hilight">Example:</span>
                       <PRE>
                         <code>
                          cout &lt;&lt; "Please enter input file name: ";
                          string iname;
                          cin &gt;&gt; iname;
                          ifstream ist {iname}; <span class="comment">// ist is an input stream for the file named name</span>
                          if (!ist) error("can't open input file ",iname);
                        </code>
                      </PRE>
                    </p>
                    <p>
                      Defining an <code>ifstream</code> with a name string
                      opens the file of that name for reading.
                      The test of <code>!ist</code> checks if the
                      file was properly opened.
                      After that, we can read from the file
                      exactly as we would from any other <code>istream</code>.
                      <i>Output to files can be handled in a similar way by
                      <code>ofstreams</code>.</i>
                    </p>
                    <br>
                    <p>
                      Explicit <code>open()</code> and <code>close()</code>
                      operations can be performed. However, relying on scope
                      minimizes the chances of someone trying to use a
                      file stream before it has been attached to a stream or
                      after it was closed:
                      <br>
                      <span class="hilight">Example:</span>
                      <PRE>
                        <code>
                          ifstream ifs;
                          <span class="comment">// . . .</span>
                          ifs &gt;&gt; foo; <span class="comment">// won’t succeed: no file opened for ifs</span>
                          <span class="comment">// . . .</span>
                          ifs.open(name,ios_base::in); <span class="comment">// open file named name for reading</span>
                          <span class="comment">// . . .</span>
                          ifs.close(); <span class="comment">// close file</span>
                          <span class="comment">// . . .</span>
                          ifs &gt;&gt; bar; <span class="comment">// won’t succeed: ifs’ file was closed</span>
                          <span class="comment">// . . .</span>
                        </code>
                      </PRE>
                    </p>
                    <br>
                    <p>
                      Also, you can’t open a file stream a second
                      time without first closing it:
                      <br>
                      <span class="hilight">Example:</span>
                      <PRE>
                        <code>
                        fstream fs;
                        fs.open("foo", ios_base::in) ; <span class="comment">// open for input</span>
                        <span class="comment">// close() missing</span>
                        fs.open("foo", ios_base::out); <span class="comment">// won’t succeed: fs is already open</span>
                        if (!fs) error("impossible");
                        </code>
                      </PRE>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.5 Reading and writing a file
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.6 I/O error handling
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.7 Reading a single value
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        10.7.1 Breaking the problem into manageable parts
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        10.7.2 Separating dialog from function
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    10.8 User-defined output operators
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.9 User-defined input operators
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.10 A standard input loop
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                </details>
                <details>
                    <summary class="sum1">
                    10.11 Reading a structured file
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        10.11.1 In-memory representation
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        10.11.2 Reading structured values
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        10.11.3 Changing representations
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!-- Include the test material here! -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
